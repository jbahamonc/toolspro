---
import Layout from '../../layouts/Layout.astro';
import ToolHeader from '../../components/ToolHeader.astro';
import '../../styles/global.css';
import './styles.css';

const title = "Eliminador de Duplicados | TextoPro.lat";
const description = "Elimina elementos duplicados de tu texto o archivo CSV de forma rápida y sencilla. Herramienta gratuita y fácil de usar.";
const toolTitle = "Eliminador de Duplicados";
const toolDescription = "Elimina elementos duplicados de tus listas automáticamente. Soporta diferentes tipos de separadores y archivos CSV.";

const separadores = [
  { value: 'newline', label: 'Salto de línea (Enter)' },
  { value: 'comma', label: 'Coma (,)' },
  { value: 'semicolon', label: 'Punto y coma (;)' },
  { value: 'tab', label: 'Tabulador' },
  { value: 'space', label: 'Espacio' }
];

---

<Layout title={title} description={description}>
  <div class="tool-container">
    <ToolHeader
      title={toolTitle}
      description={toolDescription}
      iconName="ph ph-copy"
    />

    <section class="tool-content">
      <div class="tabs">
        <button class="tab-button active" data-tab="text">
          <i class="ph ph-text-columns"></i>
          Pegar Texto
        </button>
        <button class="tab-button" data-tab="file">
          <i class="ph ph-file-csv"></i>
          Subir Archivo CSV
        </button>
      </div>

      <div class="tab-content" id="text-tab">
        <div class="input-controls">
          <label for="separator" class="input-label">Separador de elementos:</label>
          <select id="separator" class="select-input">
            {separadores.map(sep => (
              <option value={sep.value}>{sep.label}</option>
            ))}
          </select>
        </div>

        <div class="textarea-wrapper">
          <textarea 
            id="text-input"
            class="text-input"
            placeholder="Pega tu lista de elementos aquí..."
            rows="8"
          ></textarea>
        </div>

        <div class="actions-group">
          <button id="process-button" class="action-button primary">
            <i class="ph ph-check-circle"></i>
            Eliminar Duplicados
          </button>
          <button id="clear-button" class="action-button">
            <i class="ph ph-trash"></i>
            Limpiar
          </button>
        </div>

        <div class="output-section" style="display: none;">
          <div class="output-header">
            <div class="output-stats">
              <span id="original-count" class="stat">0 elementos originales</span>
              <span class="stat-separator">•</span>
              <span id="unique-count" class="stat">0 elementos únicos</span>
              <span class="stat-separator">•</span>
              <span id="duplicate-count" class="stat">0 duplicados eliminados</span>
            </div>
            <button id="copy-button" class="button-copy" title="Copiar al portapapeles">
              <i class="ph ph-copy"></i>
              Copiar texto
            </button>
          </div>
          <div class="textarea-wrapper">
            <textarea 
              id="text-output"
              class="text-input output"
              placeholder="Los elementos únicos aparecerán aquí..."
              rows="8"
              readonly
            ></textarea>
          </div>
        </div>
      </div>

      <div class="tab-content" id="file-tab" style="display: none;">
        <div class="file-upload-area">
          <i class="ph ph-file-csv"></i>
          <p>Arrastra y suelta tu archivo CSV aquí o</p>
          <label for="file-input" class="file-input-label">Selecciona un archivo</label>
          <input 
            type="file" 
            id="file-input" 
            accept=".csv" 
            style="display: none;"
          >
          <p class="file-info">Tamaño máximo: 5MB</p>
          <button id="csv-clear-button" class="action-button button-clear">
            <i class="ph ph-trash"></i>
            Limpiar
          </button>
        </div>

        <div class="output-section" style="display: none; margin-top: 2rem;">
          <div class="output-header">
            <div class="output-stats">
              <span id="csv-original-count" class="stat">0 elementos originales</span>
              <span class="stat-separator">•</span>
              <span id="csv-unique-count" class="stat">0 elementos únicos</span>
              <span class="stat-separator">•</span>
              <span id="csv-duplicate-count" class="stat">0 duplicados eliminados</span>
            </div>
            <div class="button-group" style="display: flex; gap: 0.5rem;">
              <button id="csv-copy-button" class="button-copy" title="Copiar al portapapeles" style="display: inline-flex; align-items: center; height: 2.5rem; padding: 0 1rem;">
                <i class="ph ph-copy"></i>
                Copiar texto
              </button>
              <a id="csv-download-button" class="button-copy" download="datos-sin-duplicados.csv" href="#" style="display: none; align-items: center; height: 2.5rem; padding: 0 1rem; text-decoration: none;">
                <i class="ph ph-download"></i>
                Descargar CSV
              </a>
            </div>
          </div>
          <div class="textarea-wrapper">
            <textarea 
              id="csv-output"
              class="text-input output"
              placeholder="Los elementos únicos aparecerán aquí..."
              rows="8"
              readonly
            ></textarea>
          </div>
        </div>
      </div>
    </section>
  </div>
</Layout>

<script>
  // Elementos de la pestaña de texto
  const textInput = document.getElementById('text-input') as HTMLTextAreaElement;
  const textOutput = document.getElementById('text-output') as HTMLTextAreaElement;
  const separator = document.getElementById('separator') as HTMLSelectElement;
  const processButton = document.getElementById('process-button') as HTMLButtonElement;
  const clearButton = document.getElementById('clear-button') as HTMLButtonElement;
  const copyButton = document.getElementById('copy-button') as HTMLButtonElement;
  const outputSection = document.querySelector('#text-tab .output-section') as HTMLElement;
  const originalCount = document.getElementById('original-count') as HTMLSpanElement;
  const uniqueCount = document.getElementById('unique-count') as HTMLSpanElement;
  const duplicateCount = document.getElementById('duplicate-count') as HTMLSpanElement;

  // Elementos de la pestaña CSV
  const fileInput = document.getElementById('file-input') as HTMLInputElement;
  const dropZone = document.querySelector('.file-upload-area') as HTMLDivElement;
  const csvOutputSection = document.querySelector('#file-tab .output-section') as HTMLElement;
  const csvOutput = document.getElementById('csv-output') as HTMLTextAreaElement;
  const csvOriginalCount = document.getElementById('csv-original-count') as HTMLSpanElement;
  const csvUniqueCount = document.getElementById('csv-unique-count') as HTMLSpanElement;
  const csvDuplicateCount = document.getElementById('csv-duplicate-count') as HTMLSpanElement;
  const csvCopyButton = document.getElementById('csv-copy-button') as HTMLButtonElement;
  const csvClearButton = document.getElementById('csv-clear-button') as HTMLButtonElement;

  // Elementos compartidos
  const tabButtons = document.querySelectorAll('.tab-button');
  const tabContents = document.querySelectorAll('.tab-content');

  const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

  // Manejador de pestañas
  tabButtons.forEach((button) => {
    if (button instanceof HTMLButtonElement) {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        
        // Actualizar botones
        tabButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        // Actualizar contenido
        tabContents.forEach(content => {
          const contentElement = content as HTMLElement;
          contentElement.style.display = content.id === `${tabId}-tab` ? 'block' : 'none';
        });
      });
    }
  });
  
  // Manejador de archivos CSV
  function handleCSV(content: string) {
    // Separar en líneas y limpiar espacios
    const lines = content
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0);
    
    if (lines.length === 0) {
      alert('El archivo está vacío');
      return;
    }

    // Filtrar líneas duplicadas directamente
    const uniqueItems = [...new Set(lines)];
    const totalItems = lines.length;
    
    // Actualizar estadísticas
    csvOriginalCount.textContent = `${totalItems} elementos originales`;
    csvUniqueCount.textContent = `${uniqueItems.length} elementos únicos`;
    csvDuplicateCount.textContent = `${totalItems - uniqueItems.length} duplicados eliminados`;
    
    // Preparar CSV para descarga y visualización
    const csvContent = uniqueItems.join('\n');
    
    // Mostrar resultados
    csvOutput.value = csvContent;
    csvOutputSection.style.display = 'block';

    // Configurar el botón de descarga
    const downloadButton = document.getElementById('csv-download-button') as HTMLAnchorElement;
    if (downloadButton) {
      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      downloadButton.href = URL.createObjectURL(blob);
      downloadButton.style.display = 'inline-flex';
    }

    // Configurar el botón de copiar CSV
    if (csvCopyButton) {
      csvCopyButton.onclick = async () => {
        try {
          await navigator.clipboard.writeText(csvContent);
          csvCopyButton.innerHTML = '<i class="ph ph-check"></i> ¡Copiado!';
          setTimeout(() => {
            csvCopyButton.innerHTML = '<i class="ph ph-copy"></i> Copiar texto';
          }, 2000);
        } catch (err) {
          console.error('Error al copiar:', err);
        }
      };
    }
  }

  function getSeparator(value: string): string | RegExp {
    switch (value) {
      case 'newline': return /\n/;
      case 'comma': return ',';
      case 'semicolon': return ';';
      case 'tab': return '\t';
      case 'space': return ' ';
      default: return /\n/;
    }
  }

  if (processButton && clearButton && copyButton) {
    processButton.addEventListener('click', () => {
      const text = textInput.value.trim();
      if (!text) return;

      const sep = getSeparator(separator.value);
      const elements = text.split(sep);
      const uniqueElements = [...new Set(elements)].filter(el => el.trim());
      
      // Actualizar estadísticas
      const originalLength = elements.filter(el => el.trim()).length;
      const uniqueLength = uniqueElements.length;
      
      originalCount.textContent = `${originalLength} elementos originales`;
      uniqueCount.textContent = `${uniqueLength} elementos únicos`;
      duplicateCount.textContent = `${originalLength - uniqueLength} duplicados eliminados`;
      
      // Mostrar resultados
      textOutput.value = uniqueElements.join('\n');
      outputSection.style.display = 'block';
    });

    clearButton.addEventListener('click', () => {
      textInput.value = '';
      textOutput.value = '';
      outputSection.style.display = 'none';
    });

    copyButton.addEventListener('click', async () => {
      try {
        await navigator.clipboard.writeText(textOutput.value);
        copyButton.innerHTML = '<i class="ph ph-check"></i> ¡Copiado!';
        setTimeout(() => {
          copyButton.innerHTML = '<i class="ph ph-copy"></i> Copiar texto';
        }, 2000);
      } catch (err) {
        console.error('Error al copiar:', err);
      }
    });
  }

  // Manejadores de archivos
  if (fileInput && dropZone && csvClearButton) {
    dropZone.addEventListener('dragover', (e) => {
      e.preventDefault();
      dropZone.style.borderColor = 'var(--color-primary)';
      dropZone.style.backgroundColor = 'var(--card-gradient-bg)';
    });

    dropZone.addEventListener('dragleave', (e) => {
      e.preventDefault();
      dropZone.style.borderColor = '';
      dropZone.style.backgroundColor = '';
    });

    dropZone.addEventListener('drop', (e) => {
      e.preventDefault();
      dropZone.style.borderColor = '';
      dropZone.style.backgroundColor = '';

      const file = e.dataTransfer?.files[0];
      if (file) handleFile(file);
    });

    fileInput.addEventListener('change', () => {
      const file = fileInput.files?.[0];
      if (file) handleFile(file);
    });

    csvClearButton.addEventListener('click', () => {
      fileInput.value = '';
      csvOutput.value = '';
      csvOutputSection.style.display = 'none';
      csvOriginalCount.textContent = '0 elementos originales';
      csvUniqueCount.textContent = '0 elementos únicos';
      csvDuplicateCount.textContent = '0 duplicados eliminados';
      const downloadButton = document.getElementById('csv-download-button') as HTMLAnchorElement;
      if (downloadButton) {
        downloadButton.style.display = 'none';
        downloadButton.href = '#';
      }
    });
  }

  function handleFile(file: File) {
    if (file.size > MAX_FILE_SIZE) {
      alert('El archivo es demasiado grande. El tamaño máximo es 5MB.');
      return;
    }

    if (!file.name.toLowerCase().endsWith('.csv')) {
      alert('Por favor selecciona un archivo CSV válido.');
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target?.result;
      if (typeof content === 'string') {
        handleCSV(content);
      }
    };
    reader.onerror = () => {
      alert('Error al leer el archivo. Por favor intenta de nuevo.');
    };
    reader.readAsText(file);
  }
</script>
